#!/usr/bin/env python3

# GPL-2+ ("and any later version")
# Kai LÃ¼ke 2020
# Dejvino 2021-2022

import gi # Debian package: python3-gi
gi.require_version('Gtk', '3.0')
from gi.repository import Gtk, Gio, GLib # Debian package: gir1.2-glib-2.0, gir1.2-gtk-3.0
import os, sys, signal
import psutil # Debian package: python3-psutil
from subprocess import Popen, PIPE
from pathlib import Path

from subprocess import check_output

os.chdir(os.path.dirname(sys.argv[0]))
user_folder = str(Path.home()) + "/.config/systemd/user"

APP_NAME = 'birdie'
APP_ID = 'com.github.dejvino.birdie'
VERSION = "0.2.1"
LICENSE = Gtk.License.GPL_3_0

UI_FILE_LOCAL = "./app.ui"
UI_FILE_GLOBAL = f"/usr/share/{APP_NAME}/app.ui"
SET_USER_ALARM_COMMAND_LOCAL = "./set-user-alarm"
SET_USER_ALARM_COMMAND_GLOBAL = f"/usr/lib/{APP_NAME}/libexec/set-user-alarm"
INHIBIT_COMMAND_PREFIX = ["/usr/bin/gnome-session-inhibit", "--inhibit", "suspend:logout:idle"]
ALARM_SOUND_COMMAND = [f"/usr/lib/{APP_NAME}/libexec/play-alarm-sound"]
USE_MPRIS = True # requires mpris_server module, gets checked on module load
USE_INHIBIT = True # requires session manager support, gets checked on startup

dummy_time = "0000-01-01 00:00:00"
MSG_START = "Pick a time and day for waking up."
MSG_ALARM_SET = "Alarm is set!"
MSG_WAKE_UP = "<span color='orange'>Wake up!</span>"
MSG_SET_ALARM_ERROR = "<span color='red'>Error issuing alarm, check console.</span>"
MSG_PLAY_ALARM_ERROR = "<span color='red'>Error playing alarm, check console.</span>"
MSG_NO_TIME_LEFT = "No time left"
MSG_SCHEDULING_ALARM = "<span color='gray'>Scheduling alarm...</span>"

def showErrorDialog(text, title=None, parent=None):
    dialog = Gtk.MessageDialog(
          transient_for=parent,
          flags=0,
          message_type=Gtk.MessageType.ERROR,
          buttons=Gtk.ButtonsType.CLOSE,
          text=text,
          title=(APP_NAME + " :: " + (title if title is not None else "Error"))
        )
    print(f"Error dialog: {text}")
    return dialog.run()

class AlarmApp(Gtk.Application):
  alarmtime = None
  alarm_set = False
  alarm_proc = 0
  alarm_testing = False
  prev_alarm = None
  event_handler = None
  snooze_short = 5
  snooze_long = 10

  def __init__(self, application_id):
    Gtk.Application.__init__(self, application_id=application_id)

  def register_event_handler(self, event_handler):
    self.event_handler = event_handler

  def do_startup(self):
    Gtk.Application.do_startup(self)

  def do_activate(self):
    list = Gtk.Application.get_windows(self)
    if list:
      list[0].present()
      return
    self.builder = Gtk.Builder()
    if os.path.isfile(UI_FILE_LOCAL):
      self.builder.add_from_file(UI_FILE_LOCAL)
    else:
      self.builder.add_from_file(UI_FILE_GLOBAL)
    self.builder.connect_signals(self)
    self.lefttime = self.builder.get_object("lefttime")
    self.hour = self.builder.get_object("hour")
    self.minute = self.builder.get_object("minute")
    #self.second = self.builder.get_object("second")
    self.dayall = self.builder.get_object("dayall")
    self.days = []
    for n in range(0, 7):
      self.days.append(self.builder.get_object(f'day{n}'))
    self.volumescale = self.builder.get_object("volume")
    self.volumeoption = self.builder.get_object("volumecheck")
    self.soundvolume = self.builder.get_object("soundvolume")
    self.window = self.builder.get_object("appwindow")
    self.window.set_application(self)
    self.mainbox = self.builder.get_object("mainbox")
    self.errorlabel = self.builder.get_object("error")
    self.errorlabel.set_label(MSG_START)
    self.setwakebutton = self.builder.get_object("setwake")
    self.cancelbutton = self.builder.get_object("cancel")
    self.snoozebutton = self.builder.get_object("snooze")
    self.update_layout()
    self.window.show_all()
    try:
      with open(user_folder + "/wake-up.timer", "r") as f:
        content = f.read()
      time_var = content.split("OnCalendar=")[1].split("\n")[0]
      if time_var != dummy_time:
        self.set_alarm_time(GLib.DateTime.new_from_iso8601(time_var, default_tz=GLib.TimeZone.new_local()))
        self.setwakebutton.set_active(True)
        self.set_alarm(rewrite=False)
      try:
        prev_alarm_found = content.split("Previous-Alarm=")[1].split("\n")[0]
        self.prev_alarm = GLib.DateTime.new_from_iso8601(prev_alarm_found, default_tz=GLib.TimeZone.new_local())
        if self.alarmtime is None:
          self.set_alarm_time(self.prev_alarm)
      except Exception as e:
        print(e)
      alarm_days = content.split("Alarm-Days=")[1].split("\n")[0].split(',')
      if len(alarm_days) == 7:
        for day in range(0, 7):
          self.set_enabled_day_of_week(day, True if alarm_days[day] == '1' else False)
      volume_var = int(content.split("Set-Volume=")[1].split("\n")[0])
      if volume_var == -1:
        self.volumeoption.set_active(False)
      else:
        self.soundvolume.set_value(volume_var)
    except Exception as e:
      print(e)
    self.update()
    GLib.timeout_add_seconds(1, self.updater)

  def updater(self):
    self.update()
    if not self.alarm_set or (self.alarmtime.difference(GLib.DateTime.new_now_local()) > 0):
        return True
    self.alarm_set = False
    self.start_alarm()
    return True

  def enable_alarm(self):
    alarmtime = self.calc_wakeup_time()
    if not alarmtime:
      return
    self.alarmtime = alarmtime
    self.prev_alarm = self.alarmtime
    self.set_alarm()

  def disable_alarm(self):
    self.alarm_set = False
    self.end_alarm()
    self.disable_elements(False)
    self.errorlabel.set_label(MSG_START)
    self.gen_user_timer(dummy_time)
    print("Disabling alarm service")
    check_output(["systemctl", "--user", "daemon-reload"]) # Debian package: systemd
    check_output(["systemctl", "--user", "disable", "--now", "wake-up.timer"])
    self.run_set_user_alarm()
    self.update()

  def set_alarm(self, rewrite=True):
    self.alarm_set = True
    self.window.set_sensitive(False)
    self.disable_elements(True)
    self.errorlabel.set_markup(MSG_SCHEDULING_ALARM)
    # TODO: spawn as async task
    print("Enabling alarm service")
    try:
      if rewrite:
        time_var = self.alarmtime.format("%Y-%m-%d %H:%M:%S")
        self.run_set_user_alarm([time_var])
        self.gen_user_service()
        self.gen_user_timer(time_var)
        self.load_user_timer()
      self.errorlabel.set_label(MSG_ALARM_SET)
      print(f"Alarm set for {self.alarmtime.format('%Y-%m-%d %H:%M:%S')}")
    except Exception as e:
      print(e)
      self.errorlabel.set_markup(MSG_SET_ALARM_ERROR)
      self.alarm_set = False
      self.disable_elements(False)
    self.window.set_sensitive(True)
    self.update()

  def set_alarm_time(self, alarm_time):
    self.alarmtime = alarm_time
    self.hour.set_value(self.alarmtime.get_hour())
    self.minute.set_value(self.alarmtime.get_minute())
    #self.second.set_value(self.alarmtime.get_second())

  def run_set_user_alarm(self, params=[]):
    if os.path.isfile(SET_USER_ALARM_COMMAND_LOCAL):
      check_output([SET_USER_ALARM_COMMAND_LOCAL] + params)
    else:
      check_output([SET_USER_ALARM_COMMAND_GLOBAL] + params)

  def do_snooze(self, snooze_time):
    self.set_alarm_time(GLib.DateTime.new_now_local().add_minutes(snooze_time))
    self.end_alarm()
    self.set_alarm()

  def do_snooze_short(self):
    self.do_snooze(self.snooze_short)

  def do_snooze_long(self):
    self.do_snooze(self.snooze_long)

  def snooze_clicked(self, button):
    self.do_snooze_short()

  def time_changed_text(self, input):
    # read uncommitted value?
    pass

  def time_changed(self, input):
    self.update()

  def all_days_toggle(self, checkbox):
    state = self.dayall.get_active()
    for day in range(0, 7):
      self.set_enabled_day_of_week(day, state)

  def day_toggle(self, checkbox):
    active = 0
    for day in range(0, 7):
      active += 1 if self.is_enabled_day_of_week(day) else 0
    self.dayall.set_inconsistent(False)
    if active == 0:
      self.dayall.set_active(False)
    elif active == 7:
      self.dayall.set_active(True)
    else:
      self.dayall.set_inconsistent(True)
    self.update()

  def test_alarm_clicked(self, button):
    if self.alarm_testing:
      return
    self.alarm_testing = True
    self.start_alarm()
    self.snoozebutton.set_sensitive(False)

  def start_alarm(self):
    self.disable_elements(True)
    self.cancelbutton.set_sensitive(True)
    self.snoozebutton.set_sensitive(True)
    try:
      if self.volumeoption.get_active():
        try:
          global first_sink
          global sink_volume
          first_sink = str(check_output(["sh", "-c", "LANGUAGE=C pactl list| grep -m 1 Sink | cut -d '#' -f 2"]), "utf-8").split("\n")[0]
          sink_volume = check_output(["sh", "-c", f"LANGUAGE=C pactl get-sink-volume {first_sink} | grep -o -Ei -m 1 [[:digit:]]+% | head -1 | cut -d '%' -f 1"]).decode('utf-8').split("\n")[0]
          check_output(["pactl", "set-sink-mute", first_sink, "0"])
          check_output(["pactl", "set-sink-volume", first_sink, str(int(self.volumescale.get_value()))+ "%"])
        except Exception as e:
          print(e)
      print("Spawning alarm sound app")
      self.alarm_proc = Popen((INHIBIT_COMMAND_PREFIX if USE_INHIBIT else []) + ALARM_SOUND_COMMAND)
      self.errorlabel.set_label(MSG_WAKE_UP)
      self.lefttime.set_label(MSG_NO_TIME_LEFT)
      if self.event_handler:
        self.event_handler.event_start()
    except Exception as e:
      print(e)
      self.errorlabel.set_label(MSG_PLAY_ALARM_ERROR)

  def end_alarm(self):
    if self.alarm_proc != 0:
      try:
        print("Terminating alarm sound app")
        children = psutil.Process(pid=self.alarm_proc.pid).children(recursive=True)
        for child in children:
          os.kill(child.pid, signal.SIGTERM)
        self.alarm_proc.terminate()
        self.errorlabel.set_label(MSG_START)
      except Exception as e:
        print(e)
      self.alarm_proc = 0
      self.alarm_testing = False
      self.restore_volume()
      if self.event_handler:
        self.event_handler.event_stop()

  def stop_clicked(self, button):
    self.do_stop()

  def do_stop(self):
    was_testing = self.alarm_testing
    self.end_alarm()
    self.disable_elements(False)
    if self.prev_alarm is not None and not was_testing:
      # restore the initial alarm time after snoozing
      self.set_alarm_time(self.prev_alarm)
    if self.setwakebutton.get_active():
      self.enable_alarm()
    self.update()

  def set_wake_clicked(self, button, state):
    if state:
      self.enable_alarm()
    else:
      self.disable_alarm()

  def restore_volume (self):
    check_output(["pactl", "set-sink-volume", first_sink, str(sink_volume)+ "%"])

  def disable_elements(self, val):
    self.cancelbutton.set_sensitive(False)
    self.snoozebutton.set_sensitive(False)
    self.volumeoption.set_sensitive(not val)
    self.volumescale.set_sensitive(not val)
    self.hour.set_sensitive(not val)
    self.minute.set_sensitive(not val)
    #self.second.set_sensitive(not val)
    self.dayall.set_sensitive(not val)
    for day in range(0, 7):
      self.days[day].set_sensitive(not val)

  def on_volumecheck_toggled(self, volumecheckelem):
    self.volumescale.set_sensitive(volumecheckelem.get_active())

  def on_volume_changed(self, volumeadjustment):
    self.volumescale.set_fill_level(volumeadjustment.get_value())

  def on_window_destroy(self, window):
    self.end_alarm()
    self.quit()

  def on_resize(self, window):
    self.update_layout()

  def quit_cb(self, action, parameter):
    self.on_window_destroy(self.window)

  def is_enabled_day_of_week(self, dow):
    return self.days[dow%7].get_active()

  def set_enabled_day_of_week(self, dow, enabled):
    self.days[dow%7].set_active(enabled)

  def is_timestamp_enabled_day_of_week(self, t):
    return self.is_enabled_day_of_week(t.get_day_of_week())

  def calc_wakeup_time(self):
    hour = int(self.hour.get_value())
    minute = int(self.minute.get_value())
    second = 0 #int(self.second.get_value())
    tn = GLib.DateTime.new_now_local()
    wtime = GLib.DateTime.new_local(tn.get_year(), tn.get_month(), tn.get_day_of_month(), hour, minute, second)
    if wtime.difference(tn) < 0:
      wtime = wtime.add_days(1)

    for day in range(0, 7):
      if self.is_timestamp_enabled_day_of_week(wtime):
        break
      wtime = wtime.add_days(1)
    if wtime.difference(tn.add_days(7)) > 0:
      return None
    if wtime.difference(tn) < 0:
      raise Exception("Something went wrong with the time calculation: This should never happen!")
    return wtime

  def update(self):
    label = 'Never'
    tn = GLib.DateTime.new_now_local()
    wtime = self.calc_wakeup_time()
    if wtime:
      total_sec_left = int(wtime.difference(tn)/1000/1000)
      sec_left = (int(total_sec_left % 60))
      min_left = ((int(total_sec_left/60) % 60))
      hours_left = (int(total_sec_left/60/60))
      label = f"{hours_left:02}:{min_left:02}:{sec_left:02} left"
    if self.alarm_proc != 0:
      self.lefttime.set_label(MSG_NO_TIME_LEFT)
    elif self.alarm_set:
      self.lefttime.set_label("<span color='orange'>" + label + "</span>")
    else:
      self.lefttime.set_label(label)

  def update_layout(self):
    wsize = self.window.get_size()
    target_orientation = Gtk.Orientation.VERTICAL if wsize.width < wsize.height else Gtk.Orientation.HORIZONTAL
    if (self.mainbox.get_orientation() != target_orientation):
      self.mainbox.set_orientation(target_orientation)

  def gen_user_service(self):
    p = os.path.realpath(__file__)
    content = f"""[Unit]
Description=User Wake Up Action
[Service]
ExecStart=gapplication launch {APP_ID} 
"""
    with open(user_folder + "/wake-up.service", "w") as f:
      f.write(content)

  def gen_user_timer(self, time_arg):
    # TODO: Is "Persistent=true" really needed for race safety?
    volume_setting = int(self.volumescale.get_value()) if self.volumeoption.get_active() else -1
    if self.prev_alarm:
      prev_alarm_found = self.prev_alarm.format("%Y-%m-%d %H:%M:%S")
    else:
      prev_alarm_found = dummy_time
    alarm_days=','.join([('1' if self.is_enabled_day_of_week(x) else '0') for x in range(0,7)])
    content = f"""[Unit]
Description=User Wake Up Timer
[Timer]
Persistent=true
AccuracySec=1us
OnCalendar={time_arg}
## alarm config start
# Previous-Alarm={prev_alarm_found}
# Alarm-Days={alarm_days}
# Set-Volume={volume_setting}
## alarm config end
[Install]
WantedBy=timers.target
"""
    with open(user_folder + "/wake-up.timer", "w") as f:
      f.write(content)

  def load_user_timer(self):
    check_output(["systemctl", "--user", "daemon-reload"])
    check_output(["systemctl", "--user", "enable", "wake-up.timer"])
    check_output(["systemctl", "--user", "restart", "wake-up.timer"])

app = AlarmApp(APP_ID)

if USE_MPRIS:
  try:
    import mpris_server
  except ModuleNotFoundError:
    showErrorDialog("mpris_server module is missing. Did you install dependencies?")
    sys.exit(1)
  from mpris_server.adapters import MprisAdapter
  from mpris_server.events import EventAdapter
  from mpris_server.server import Server
  from mpris_server.adapters import Metadata
  from mpris_server.adapters import Microseconds, VolumeDecimal, PlayState, Track
  from mpris_server.base import Artist, Album

  class MyAppAdapter(MprisAdapter):
      
      def can_quit(self) -> bool:
          return False

      def can_raise(self) -> bool:
          return False

      def get_desktop_entry(self) -> str:
          return "com.github.dejvino.birdie"

      def can_fullscreen(self):
          return False
      
      def get_current_position(self) -> Microseconds:
          return int(0)

      def resume(self):
          pass

      def pause(self):
        if app.alarm_testing:
          app.do_stop()
        else:
          app.do_snooze_short()

      def play(self):
          pass

      def previous(self):
          app.do_stop()

      def next(self):
          if app.alarm_testing:
              app.do_stop()
          else:
              app.do_snooze_long()

      def stop(self):
          app.do_stop()

      def get_playstate(self) -> PlayState:
          return PlayState.PLAYING if app.alarm_proc != 0 else PlayState.STOPPED

      def is_repeating(self) -> bool:
          return False

      def is_playlist(self) -> bool:
          return False

      def get_shuffle(self) -> bool:
          return False

      def get_art_url(self, track: int) -> str:
          return f"file:///usr/share/icons/hicolor/scalable/apps/{APP_ID}.svg"

      def get_volume(self) -> VolumeDecimal:
          float(1)

      def is_mute(self) -> bool:
          return False

      def can_go_next(self) -> bool:
          return True

      def can_go_previous(self) -> bool:
          return True

      def can_play(self) -> bool:
          return True

      def can_pause(self) -> bool:
          return True

      def can_seek(self) -> bool:
          return False

      def can_control(self) -> bool:
          return True

      def get_stream_title(self) -> str:
          pass#return "Stream title"

      def get_current_track(self) -> Track:
          artist = Artist("<< Stop | Snooze | Sleep In >>")
          album = Album(
              name="Good Morning!",
              artists=(artist,)
          )
          track = Track(
              track_id='/default/1',
              name="Wake up!",
              track_no=1,
              length=60,
              artists=(artist,),
              album=album
          )
          return track

      def get_previous_track(self) -> Track:
          pass

      def get_next_track(self) -> Track:
          pass

  class MyAppEventHandler(EventAdapter):
    def event_start(self):
      self.on_playpause()
      self.on_options()
      self.on_title()

    def event_stop(self):
      self.on_playpause()
      self.on_options()
      self.on_ended()
    
  my_adapter = MyAppAdapter()
  mpris = Server(name=APP_NAME, adapter=my_adapter)
  mpris.publish()
  event_handler = MyAppEventHandler(root=mpris.root, player=mpris.player)
  app.register_event_handler(event_handler)

def runSanityCheck(command, message, details=None):
  try:
    check_output(command)
  except Exception as e:
    print("\nSanity check Failed!")
    print("Command executed: ", command)
    print("Error received: ", e)
    print()
    print(message)
    if details != None:
      print(details)
    showErrorDialog(f"{message}\n\nCheck console output for details.", title="Sanity Check Failed")
    sys.exit(1)

def runAllSanityChecks():
  runSanityCheck(["mkdir", "-p", user_folder],
    "Couldn't create configuration directory.")
  runSanityCheck(["gapplication"],
    "Install missing packages for Gtk.",
    " Debian: libglib2.0-bin")
  runSanityCheck(["pactl", "--version"],
    "Install missing packages for PulseAudio.",
    " Debian: pulseaudio-utils")
  runSanityCheck(["gnome-session-inhibit", "--version"],
    "Install missing packages for Gnome Session.",
    " Debian: gnome-session-bin")
  global USE_INHIBIT
  try:
    check_output(["gnome-session-inhibit", "--inhibit", "suspend", "/bin/pwd"])
  except Exception as e:
    print("NOTICE: Gnome Session Inhibit is not supported by the environment.")
    print("Alarm will not be able to keep the system from suspending!")
    USE_INHIBIT = False

if __name__ == "__main__":
  if len(sys.argv) > 1:
    arg0 = sys.argv[1]
    if arg0 == '-v' or arg0 == '--version':
      print(f"{APP_NAME} v{VERSION}")
      sys.exit(0)
    if arg0 == '-c' or arg0 == '--check':
      print("Running sanity checks.")
      runAllSanityChecks()
      print("OK. Required checks passed.")
      sys.exit(0)
    if arg0 != '-h' and arg0 != '--help':
      print(f"Unrecognized parameter '{arg0}'.")
    print(f"Usage: {sys.argv[0]} [PARAMETER]")
    print("")
    print("Supported parameters:")
    print(" -c --check      run sanity checks and exit")
    print(" -v --version    print app version")
    print(" -h --help       print this help")
    sys.exit(0)
  runAllSanityChecks()
  exit_status = app.run(sys.argv)
  sys.exit(exit_status)
